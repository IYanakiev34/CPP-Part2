General:
We are given a singleton class for handling command line options.
The problem is that the *s_options in the original class is destructed, 
but its pointed value(s) are not. The exercise proposes a function that 
can free said memory, but the drawback is that it must be called manually, 
which is potentially unsafe. We must automatically free the memory. To do so,
we leverage the fact that static objects are automatically destructed upon program 
termination. Thus, we wrap our static *s_options in a s_destructor. The s_destructor's
destructor is automatically called, which we use to call the Options destructor, thus 
freeing all memory used.

Question:
In addition, answer the following question: assume your initial implementation 
defined the s_options static data member, and is made available in a software library. 
The modified implementation defines a static Destructor s_destructor object. You're 
the developer of that library, and you publish Options's new implementation. What 
must users of your Object class do so their programs use the new Options implementation:

When your library is made available as a static library:
    In a static library, the code is locked in a final executable file, which means that to 
    apply changes, you need to recompile the library. That means you would have to update the file 
    in the library and then recompile the whole thing.

When your library is made available as a dynamic (shared) library:
    In a dynamic library, the code lives outside the executable, so you don't have to recompile. 
    You just have to replace the old file version with the new one.

In both cases you would have to update files calling the deleter.
Using third party libraries might be problem
due to the reason of change. One good thing to do
is to create a wrapper classes around the library
classes we want to use, but this will not save us
from the problem of data or API change. After
careful consideration we could use the PImpl idiom,
this wold allow us to not only wrap bu seperate the
implementation. This would reduce the compilation time
since if changes do occur in the header we will not have to
recompile so many classes. It also solve the problem of 
changes within the data organization of the implementation
itself. The interface is independant of the data members.
Making changes to the implementation would not break 
the dependant code. By adhering to this principle we can
then proceed to use potentially composition in one of our
classes to use the functionality we have wrapped from the
third party library.
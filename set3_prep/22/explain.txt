Since in our function caller we pass a reference to
the base class, technically we can use only base class
functions. This is due to the fact that references are
really pointers in disguise. As stated in the book:
    "When a function is called using a pointer to an object, 
    then the type of the pointer (and not the type of
    the object) determines which member functions are available 
    and can be executed."

In order to execute the functionality provided by the derived
class we will need to create a variable of type Derived * and
perform a static_cast to the function parameter. This of course
is not safe and this is where the real problem is. If the type
of the object passed to the function is really a derived class
well then  everything should work as expected, however if the 
type is lets say of the type of the base class, unexpected behavior
might occur. This could happen due to slicing depending on the
member variables inside the derived class and how the functions
inside the derived class depend on those variables there exists
a possibility where we receive undesirable behavior due to slicing.
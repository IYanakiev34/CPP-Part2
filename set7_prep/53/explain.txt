I define multiout with both specified functions
and a data member indicating the number of threads.
The constructor simply defines that data member.
The run function creates n threads, where n is the value
of that data member. Each thread calls my display function,
after which the threads are joined. The display function
creates a stringstream which I use to store the ordered output.
Meanwhile, the thread # is printed directly to cout. These become
mangled because multiple threads are running at once. I also
make sure to yield after each print to cout. When an
individual thread finishes, it prints the stringstream to cout.
The output of the stringstream is not mangled because it is sent
to cout all at once. Here is example output:
    thread thread 2
    1
    thread 0
    thread thread 0
    thread 0
    thread 0
    Line 0 from thread 0
    Line 1 from thread 0
    Line 2 from thread 0
    Line 3 from thread 0
    thread 2
    thread 2
    thread 2
    1
    thread 1
    thread 1
    Line 0 from thread 1
    Line 1 from thread 1
    Line 2 from thread 1
    Line 3 from thread 1
    Line 0 from thread 2
    Line 1 from thread 2
    Line 2 from thread 2
    Line 3 from thread 2
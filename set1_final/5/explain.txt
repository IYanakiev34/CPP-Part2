
1. First::fun() is called because the the First namespace contains the argument types (in our case the Enum type) and it also
   contains the function fun(). Thus due to the Koening lookup when we just call fun() we see that the Enum type is defined in the
   First namespace and we use the fuction in this namespace. In order to call fun() from the Second namespace we can do
   something like: Second::fun(args).

2. The operator << is simplified due to the reason mentioned above. For example std::cout << there is no << in the global namespace thus is examines the
   namespace of std and finds the operator. Based on the function call arguments and where their defined the compiler can resolve the statement.
   For example operator<<(std::cout,"Hello World\n) is a valid function call.
   
3. The Koenig Lookup works on namespaces. Since the function fun() defines in main has a parameter type defined inside a namespace (First)
   and First also has a function with identical signature then there is ambiguity that the compiler cannot resolve. The program cannot even 
   compile and produces error: call of overloaded 'fun(First::Enum) is ambigious'. As stated above this is due to having a function with matching 
   signature from a namespace defined outside of a namespace having arguments that are defined inside the namespace in mind. (First).
